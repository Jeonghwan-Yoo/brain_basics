/*
조합 논리회로와 순차 논리회로는 무엇이 다른 것일까?
게이트를 서로 연결해 구현한다는 점에서 같은 논리회로.
차이는 출력값이 입력 신호만 의존하는지 아니면 내부 상태값에도 의존하는지 차이.

플립플롭이란?
플립플롭도 게이트를 서로 연결해 만든 논리회로 중 하나.
단지 출력단의 값이 다시 입력 쪽에서 사용되어 입력값이 바뀌어도 출력이 유지되는 성질.
즉 메모리 효과를 지니게 되는 논리회로.
플립플롭이 회로 구성 중에 사용되면 그 회로는 순차 논리회로가 된다.

01 조합 논리회로
기본적으로 AND 같은 가장 기본적인 게이트가 입력의 변화에 곧바로 출력이 반응하는 소자입니다.
따라서 이들 게이트로 구성된 회로도 결국 입력의 변화가 곧바로 출력에 반영되는 형태의 회로.
MUX에서 S가 0에서 1로 바꾸게 되면 동시에 출력도 바뀐다.
실제로 빛의 속도도 유한하므로 아주 약간의 전파지연시간만큼은 입력과 출력의 변화사이에 존재하지만 '동시'라고 인식.
우리는 이런 회로를 조합 논리회로(Combinational Logic Circuit).
입력의 변화가 바로 출력에 반영되는 회로.
특정 시점의 출력이 그 시점의 입력에 의해서만 결정되는 회로.
사다리 게임, 전광판에 표시되는 즉흥적인 회로는 만들 수 있다.

02 순차 논리회로
자판기 회로 안에는 기존까지의 누계금액인 현재 상태를 저장할 수 있는 방법이 있어야 합니다.
그리고 그 누계값이 다시 자판기의 입력값이 될 수 있어야 합니다.
어떤 상태값을 저장해두고 그 상태값이 다시 입력으로 들어가 다음 상태값과 출력을 결정하는 
회로를 순차논리회로(Sequential Logic Circuit).
같은 입력을 주더라도 시점(순서)에 따라, 현재의 상태값(저장된 값)이 함께 출력의 결정에 영향을 끼친다.
대다수의 전자 제품이 순차 논리회로로 구성.
그렇다면 메모리 소자는 어떻게 구성하는 것일까?
첫번째는 흔히 DRAM. PC를 조립하면서 메인보드에 꽂는 메모리.
기본적으로 커패시터라고 하는 전자부품을 사용해서 만듭니다.
커패시터는 아주 작은 충전지로 충전이 되있는가로 0과 1의 상태를 구분.
커패시터는 특성상 충전된 상태를 계속 유지하지 못하기 때문에 현재 상태를 기억하기 위해 계속 충전을 반복해주는
주변회로를 꾸며야 합니다. 이를 리프레쉬(Refresh)라고 하는데, 이로 인해 속도가 느려집니다.
대신 단순한 구조로 인해 가격이 낮아 대용량 외부 메모리를 구성하는데 사용됩니다.
하지만 논리회로를 구성하면서 내부에 저장하는 상태값은 아주 적은 용량으로도 충분하다.
회로로 구성하려면 아주 작은 칩안에 들어가야합니다.
그래서 게이트를 이용해 상태를 저장할 수 있도록 만든 메모리가 있는데 플립플롭(Flip-flop).
출력 단의 입력값이 바뀌더라도 유지하도록 만든 회로입니다.
회로가 시간을 넘나드는 기억 능력을 지니게 된 것.

03 RS플립플롭
AND게이트 뒤에 NOT게이트를 붙인것을 NAND게이트.
A B Y
0 0 1
0 1 1
1 0 1
1 1 0
출력은 입력 중 어느 하나라도 0이 있으면 1이 된다.
  S->NAND->Q
    ^    |
  ┌─┼────┘
  | └──┐
  v    |
R->NAND->P
S R Q P
0 1 1 0
1 1 1 0
1 0 0 1
1 1 0 1
현재 출력이 무엇이든 상관없이 S가 0이 되면 출력 Q,P는 1,0이 되고
R이 0이 되면 기존 출력값에 상관없이 출력 Q,P는 0,1이 된다.
하지만 S,R값이 0에서 1로 바뀔 경우에는 출력값이 변하지 않고 기존 출력을 유지한다.
S입력은 출력을 1로 Set하는 기능을 하고, R입력은 출력을 0으로 Reset하는기능.
P는 Q'가 된다.

04 D 플립플롭
RS플립플롭에서 S,R값이 모두 0이 되는 경우는 회로의 이후 동작을 제어할 수 없게 됩니다.
그리고 이 소자가 메모리 소자로서 동작하기 위해선 좀 더 직관적이고 명확한 논리가 필요합니다.
어느 시점에서 저장할 것인지도 결정해야되고, 적절한 S,R신호를 생성하기 위한 추가 회로가 구성되어야 합니다. 
동시에 0이 되지 못하게도 해야 합니다.
보조회로 추가
D┬─────>NAND->S
 |      ^
C┼──────┤
 |      v
 └>NOT->NAND->R
C D S R
0 0 1 1
0 1 1 1
1 0 1 0
1 1 0 1
C가 0인 경우는 무조건 S,R 둘다 1이 되고, C가 1일 경우에만 D에 따라 S,R이 서로 상반되는 출력을 내보낸다.
S,R신호가 모두 0이 되는 경우를 근본적으로 방지해 회로가 폭주하는 것을 막을 수 있습니다.
C가 0인 경우는 S,R 둘 다 1이 되는데, RS플립플롭의 입력이 될 경우에는 출력에 아무런 변화가 없습니다. 이전상태를 유지.
C가 0일 때는 회로의 출력값을 변화시킬 수 없고 C가 1일 때만 D값에 따라 출력을 변화시킬 수 있다.
외부에서 어떤 노이즈가 들어오더라도 회로는 정상상태를 유지하고, 이런 회로가 여러 개 있어 모두 C값을 공유한다면
C가 1인동안만 모든 회로가 동시에 동작하게 되어 전체 회로의 동기를 맞추는 것이 가능해집니다.
이런 동기화된 디지털 회로의 가장 대표적인 예는 CPU. 클럭속도가 C값 이 0에서 1로 변하는 주기.
CPU는 다양한 조합논리회로와 레지스터라고 부르는 순차 논리회로로 구성되어 있는데,
이 중 순차 논리회로의 동기를 맞추어 단계별로 작업을 할 수 있게 하는 신호등 역할을 하는 것이 C, 클럭입니다.
외부입장에서는 입력이 D,C 출력이 Q,P인 새로운 회로.
C D S R Q P
1 1 0 1 1 0
0 1 1 1 1 0
0 0 1 1 1 0
1 0 1 0 0 1
0 1 1 1 0 1
현재 출력값이 무엇이든지 간에 C,D 입력 모두를 1로 주면 S,R이 0,1이 되고, 회로는 Set으로 동작하고 Q는 1로 변함.
이 상태에서 다시 C를 0으로 주면 D에 상관없이 S,R이 항상 1이므로 Q는 이전 값을 그대로 유지하여 1인 상태.
다시 C를 1로 만들어 회로를 활성화시키고 D를 0으로주면 Q는 0으로 바뀝니다.
즉, C가 1일 때만 회로는 동작상태가 되고, 입력 D가 그대로 Q로 출력됩니다.
C가 0일 때는 앞에서 셋팅된 출력 Q는 D가 어떻게 변하든 상관없이 그대로 유지.
그리고 R,S가 동시에 0인 무정의 조건이 존재하지 않아 안심하고 회로를 설계할 수 있습니다.

05 기타 플립플롭과 이들의 존재 의의
다른 플립플롭들도 결국 RS플립플롭을 기본으로 해서 확장시켜 더 편리하게 만든 것에 불과하다.
T플립플롭은 C가 1일 때 입력 T와 반대 값이 출력인 회로.
JK플립플롭은 1,1입력시에 출력을 반전시키는 것이 다르다.
T플립플롭
Q(t) T Q(t+1)
 0   0   0
 0   1   1
 1   0   1
 1   1   0
JK플립플롭
Q(t) J K Q(t+1)
 0   0 0   0
 0   0 1   0
 0   1 0   1
 0   1 1   1
 1   0 0   1
 1   0 1   0
 1   1 0   1
 1   1 1   0
Q(t)는 모두 현재의 출력값을 나타내고 Q(t+1)은 입력이 가해진 후의 다음 출력값을 의미.
클럭 입력 C를 가지고 C입력이 1일 때만 입력값이 출력값에 영향을 미친다.
플립플롭 두 개를 연결해 만든 마스터-슬레이브 플립플롭도 있다.
이런 플립플롭들은 C가 1인 동안 항상 동작하여 C가 1인동안 입력값이 바뀌면 다시 출력이 바뀌는 특성을 없애기 위한 것들.
마스터-슬레이브 플립플롭은 C가 0에서 1로 혹은 1에서 0으로 변하는 모서리 부분에서만 입력을 반영해 출력을 변화시키는 회로.
출력은 딱 그 모서리 한 순간에만 바뀔 것이고, 나머지 기간 동안엔 입력이 어떻게 변하든 상관없음.
모서리에서만 동작한다고 하여 Edge-Triggered플립플롭.
장점은 두 개 이상의 플립플롭이 서로 연결되어 있는 구조에서 같은 클럭을 사용하면서도 서로 다른 출력을 가질 수 있다는 점.
만약 D플립플롭을 2개 연결하면 두 플립플롭은 서로 항상 같은 결과를 나타내고 하나일 때랑 아무 차이가 없다.
Edge-triggered는 각 플립플롭은 입력이 출력으로 반영되는데 전파지연시간만큼의 시간이 걸립니다.
클럭 펄스가 트리거되고 D값이 Q로 반영되는데 다소의 시간이 걸립니다.
즉, 클럭이 트리거되어도 잠시동안은 Q값이 이전 값을 유지한다는 얘기.
클럭 트리거가 일어나고 난 후에는 오른쪽플립플롭의 출력은 클럭 이전의 왼쪽 Q값을, 왼쪽 플립플롭의 출력은 새로운 D값을 반영.
클럭이 트리거 될 때마다 왼쪽에서 오른쪽으로 출력값이 전이가 일어나는 것.
이 회로는 비트를 회전시킬 때 사용되는 쉬프트 레지스터(Shift Register)라고 하는 회로.
클럭이 인가될 때마다 출력값이 오른쪽으로 1비트씩 밀려가고, 제일 끝에 출력값은 다시 제일 왼쪽 첫번째 입력으로 인가.
순차회로를 사용하면 데이터를 기억할 수도 있고, 
클럭이 일어날 때마다 나머지 조합회로 부분을 어떻게 꾸미는가에 따라 그 상태값을 변경할 수 있다.

복잡한 회로의 설계
아무리 복잡한 시스템이어도 결국은 입력을 주면 출력을 내보내는 입출력 함수에 불과하다.
내부회로는 VHDL과 같은 회로 설계 언어로 해결.
많아져도 규칙을 찾아내고 자동화해 컴퓨터에게 맡기면 어려운 일이 아니다.
VHDL은 회로의 입출력 핀을 설정하고 이들 입출력 핀간의 동작은 C언어와 유사한 형태로 기술하면
자동으로 시뮬레이션 할 수 있고, 실제 회로까지도 구성해주는(Synthesis) 역할 까지 하는 막강한 언어이다.
CPU의 도움을 받아 다시 논리회로를 설계하는 것.

*/